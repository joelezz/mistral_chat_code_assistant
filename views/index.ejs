<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mistral AI Chat</title>
    <!-- Add highlight.js for code syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <!-- Add marked.js for markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked@4.3.0/marked.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        form {
            margin-bottom: 20px;
        }
        textarea {
            width: 100%;
            height: 100px;
            margin-bottom: 10px;
            padding: 8px;
        }
        button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        .chat-container {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 20px;
            max-height: 400px;
            overflow-y: auto;
        }
        .message {
            padding: 8px 15px;
            margin: 5px 0;
            border-radius: 18px;
            max-width: 70%;
        }
        .user-message {
            background-color: #DCF8C6;
            margin-left: auto;
            text-align: right;
        }
        .assistant-message {
            background-color: #F1F0F0;
        }
        .error {
            color: red;
            font-weight: bold;
        }
        
        /* Loading animation styles */
        .loading {
            display: none;
            background-color: #F1F0F0;
            padding: 15px;
            border-radius: 18px;
            margin: 5px 0;
            max-width: 70%;
        }
        .bouncing-dots {
            display: flex;
            align-items: center;
        }
        .dot {
            width: 8px;
            height: 8px;
            background-color: #555;
            border-radius: 50%;
            margin: 0 3px;
            animation: bounce 1.5s infinite ease-in-out;
        }
        .dot:nth-child(1) { animation-delay: 0s; }
        .dot:nth-child(2) { animation-delay: 0.2s; }
        .dot:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes bounce {
            0%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
        }
        
        /* Code block styles */
        pre {
            background-color: #282c34;
            border-radius: 6px;
            padding: 15px;
            overflow-x: auto;
            margin: 10px 0;
        }
        code {
            font-family: 'Courier New', Courier, monospace;
        }
        .code-header {
            display: flex;
            justify-content: space-between;
            background-color: #21252b;
            padding: 5px 15px;
            border-top-left-radius: 6px;
            border-top-right-radius: 6px;
            margin-top: 10px;
            color: #abb2bf;
            font-size: 12px;
        }
        .copy-button {
            background-color: transparent;
            color: #abb2bf;
            border: 1px solid #abb2bf;
            border-radius: 4px;
            padding: 2px 6px;
            font-size: 11px;
            cursor: pointer;
        }
        .copy-button:hover {
            background-color: #3a404b;
        }
        /* Fix pre/code combo rendering issues */
        .message pre {
            margin-top: 5px;
            white-space: pre-wrap;
        }
        .message pre code {
            white-space: pre;
        }
    </style>
</head>
<body>
    <h1>Chat with Mistral AI</h1>
    
    <div class="chat-container" id="chat-container">
        <% if (messages && messages.length > 0) { %>
            <% messages.forEach(message => { %>
                <div class="message <%= message.role === 'user' ? 'user-message' : 'assistant-message' %>">
                    <strong><%= message.role === 'user' ? 'You' : 'Mistral AI' %>:</strong>
                    <div class="message-content"><%= message.content %></div>
                </div>
            <% }); %>
        <% } %>
        
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="error"><%= error %></div>
        <% } %>
        
        <!-- Loading animation -->
        <div class="loading" id="loading-animation">
            <strong>Mistral AI:</strong>
            <div class="bouncing-dots">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        </div>
    </div>
    
    <form action="/ask" method="POST" id="chat-form">
        <textarea name="question" id="input-el" placeholder="Ask a question..."></textarea>
        <input type="hidden" name="sessionId" value="<%= sessionId %>">
        <button type="submit" id="submit-btn">Send</button>
    </form>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('chat-form');
            const loadingAnimation = document.getElementById('loading-animation');
            const submitButton = document.getElementById('submit-btn');
            const chatContainer = document.getElementById('chat-container');
            
            // Configure marked.js
            marked.setOptions({
                highlight: function(code, lang) {
                    const language = hljs.getLanguage(lang) ? lang : 'plaintext';
                    return hljs.highlight(code, { language }).value;
                },
                langPrefix: 'hljs language-'
            });
            
            // Process all message contents to render markdown/code blocks
            const messageContents = document.querySelectorAll('.message-content');
            messageContents.forEach(element => {
                // Get the original content
                const originalContent = element.textContent;
                
                // Check if there are code blocks
                if (originalContent.includes('```')) {
                    // Parse markdown using marked
                    element.innerHTML = marked.parse(originalContent);
                    
                    // Find all code blocks and add copy buttons
                    const codeBlocks = element.querySelectorAll('pre code');
                    codeBlocks.forEach((codeBlock, index) => {
                        const pre = codeBlock.parentNode;
                        const language = codeBlock.className.replace('hljs language-', '');
                        
                        // Create header with language and copy button
                        const header = document.createElement('div');
                        header.className = 'code-header';
                        header.innerHTML = `
                            <span>${language || 'code'}</span>
                            <button class="copy-button" data-index="${index}">Copy</button>
                        `;
                        
                        // Insert header before pre
                        pre.parentNode.insertBefore(header, pre);
                        
                        // Add event listener to copy button
                        header.querySelector('.copy-button').addEventListener('click', function() {
                            const codeText = codeBlock.textContent;
                            navigator.clipboard.writeText(codeText)
                                .then(() => {
                                    this.textContent = 'Copied!';
                                    setTimeout(() => {
                                        this.textContent = 'Copy';
                                    }, 2000);
                                })
                                .catch(err => {
                                    console.error('Could not copy text: ', err);
                                });
                        });
                    });
                }
            });
            
            // Auto-scroll to bottom of chat container
            chatContainer.scrollTop = chatContainer.scrollHeight;
            
            form.addEventListener('submit', function(e) {
                // Show loading animation
                loadingAnimation.style.display = 'block';
                
                // Disable submit button
                submitButton.disabled = true;
                submitButton.textContent = 'Sending...';
                
                // Auto-scroll to show loading animation
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                // Form will submit normally, no need to prevent default
            });
        });
    </script>
</body>
</html>